{
	"info": {
		"_postman_id": "e64c2c3b-a1ad-4e07-a48c-1834d3d1555c",
		"name": "GitHubApiTests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Get-All-Repos",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var responseJson = pm.response.json();\r",
							"\r",
							"pm.test(`Status code is 200`, () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// test if all repositories are public\r",
							"responseJson.forEach(repo => {\r",
							"    let visibility = repo.visibility;\r",
							"    pm.test(`${repo.name} is ${visibility}`, () => {\r",
							"        pm.expect(visibility.toLocaleLowerCase()).to.equal(`public`.toLocaleLowerCase());\r",
							"    })\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.github.com/users/{{user}}/repos",
					"protocol": "https",
					"host": [
						"api",
						"github",
						"com"
					],
					"path": [
						"users",
						"{{user}}",
						"repos"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get-All-QA-Automation-Issues",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(`Status code is 200`, () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(`Content-Type is present`, () => {\r",
							"    pm.response.to.have.header(`Content-Type`);\r",
							"});\r",
							"\r",
							"var responseJson = pm.response.json();\r",
							"// test if all issues are assigned\r",
							"responseJson.forEach(issue => {\r",
							"    pm.test(`${issue.title} is assigned to ${issue.assignee}`, () => {\r",
							"        pm.expect(issue.assignee).to.not.equal(null);\r",
							"    })\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.github.com/repos/{{user}}/{{repo}}/issues",
					"protocol": "https",
					"host": [
						"api",
						"github",
						"com"
					],
					"path": [
						"repos",
						"{{user}}",
						"{{repo}}",
						"issues"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create-QA-Automation-Issue",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(`Issue created`, () => {\r",
							"    pm.response.to.have.status(`Created`);\r",
							"});\r",
							"\r",
							"var requestBodyTitle = JSON.parse(pm.request.body.raw).title;\r",
							"\r",
							"// test if the returned issue title matches the newly-created issue title\r",
							"pm.test(`Title is: ${requestBodyTitle}`, () => {\r",
							"    let responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.title).to.equal(requestBodyTitle);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\":\"Issue form Postman\",\r\n    \"body\":\"No RestSharp test available in this project.\",\r\n    \"labels\":[\"API\", \"Test\", \"Improvement\"],\r\n    \"assignee\":\"{{user}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://api.github.com/repos/{{user}}/{{repo}}/issues",
					"protocol": "https",
					"host": [
						"api",
						"github",
						"com"
					],
					"path": [
						"repos",
						"{{user}}",
						"{{repo}}",
						"issues"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update-QA-Automation-issue",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(`Issue No. 10 updated`, () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"var issue10 = pm.response.json();\r",
							"var requestBodyBody = JSON.parse(pm.request.body.raw).body;\r",
							"// test if the returned issue body matches the newly-updated issue body\r",
							"pm.test(`Issue body updated`, () => {\r",
							"    pm.expect(issue10.body).to.equal(requestBodyBody);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"body\":\"Issue description from Postman via PATCH request.\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://api.github.com/repos/{{user}}/{{repo}}/issues/10",
					"protocol": "https",
					"host": [
						"api",
						"github",
						"com"
					],
					"path": [
						"repos",
						"{{user}}",
						"{{repo}}",
						"issues",
						"10"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "basic",
		"basic": [
			{
				"key": "username",
				"value": "YOUR_USERNAME",
				"type": "string"
			},
			{
				"key": "password",
				"value": "YOUR_TOKEN",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}